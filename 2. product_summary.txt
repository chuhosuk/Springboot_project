1~5까지, 6-1, 6-2 customer와 동일


///////// 에러

java.sql.SQLException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'
==> C:\Program Files\Java\jre1.8.0_241\lib\ext\ojdbc6.jar 붙여넣는다.

insert문장 regDate 오류 
=> 서비스 : dto.setRegDate(new Timestamp(System.currentTimeMillis()));
=> mapper에서 sysdate로 주거나 아예 regDate를 빼거나


HomeController.java가 작동안되면 플젝 새로 생성

javaScript 캐쉬가 먹으면 강력 새로고침 또는 이클립스 껐다 키기

///////////////////


1. 커넥션풀 추가

 <Resource author="Container" 
     driverClassName="oracle.jdbc.driver.OracleDriver" 
     maxActive="5" maxWait="1000" 
     name="jdbc/jsp_pj_126" 
     password="tiger"
     type="javax.sql.DataSource" 
     url="jdbc:oracle:thin:@localhost:1521:xe" 
     username="jsp_pj_126"/>
     
-----------------------------------------------------     
2. 플젝 생성 : NEW > Spring Legacy Project > 프로젝트명 입력 > Spring MVC Project 선택 > 패키지(3레벨이상) 입력 : spring.mvc.pj_126
  => 패키지(3레벨이상) 입력해야 하며, 3레벨이 컨텍스트명(pj_126)이 된다. 
  
=> 테스트 => http://localhost/
	home.jsp 실행
	Hello world!

1) 자바 설정
	
	- project 우클릭 > properties > Project Facets > java를 1.8로 변경
	Runtimes 탭에서 Apache Tomcat v8.5 클릭 > Apply 버튼
	
	- project 우클릭 > properties > Java Build Path > Library 탭 > jre System library 선택후 Edit 선택 / 또는 jre System library 더블클릭
	> 세번째 workspace default JRE(jre1.8.0_xxx) 선택
	
	- java compiler - 1.8버전 확인
	
2) pom.xml에 버전 반영
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>5.3.24</org.springframework-version>		
		
3) 실행 : 
	http://localhost/pj_126/
	=> http://localhost/세번째 패키지명/
	
-----------------------------------------------------	
3. 패키지 생성

	spring.mvc.pj_126.controller
	spring.mvc.pj_126.service
	spring.mvc.pj_126.dao
	spring.mvc.pj_126.dto

-----------------------------------------------------	
4. web.xml 맨 아래에 한글 안깨지도록 추가

	<!-- 한글 안깨지게 처리 시작 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>	
		
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 한글 안깨지게 처리 종료 -->

확인 => http://localhost/pj_126/
	Hello world!
	The time on the server is 2022년 3월 8일 (화) 오전 11시 02분 52초.
	
-----------------------------------------------------	
5. pom.xml에 Mybatis.jar 파일 설정
   
   mvnrepository.com에서 4개의 라이브러리를 복사후 pom.xml에 등록하면
   maven 중앙 repository(저장소)로부터 다운로드 후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다.
   
 	<!-- Mybatis 설정 시작 -->
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>1.3.2</version>
	</dependency>
		
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.4.6</version>
	</dependency>
	
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.3.24</version>
	</dependency>
	<!-- Mybatis 설정 끝 -->
	
   --spring-test
   
------------------------------------------------------------------------------   
 6. jsp의 ProductController 소스 open
 	
 	- 해당 경로에 Product 파일 복사해서 가져온다. 	
 	ProductController 소스 만들고 작성
 	ProductService,ProductServiceImpl 복사해서 가져온다.
 	ProductDTO 복사해서 가져온다.
 	ProductDAO, ProductDAOImpl 복사해서 가져온다.
 	
 	- jsp는 안한 경우에만 작업
 	- jsp : common / manager  => 복사해서 views 폴더에 붙여넣는다.(안한경우)
 	  jsp : resources => 복사해서 resources 폴더에 붙여넣는다.(안한경우)
 	  
 ==> 스프링으로 변환	(jsp는 경로만 수정, 백엔드(클래스는 어노테이션 처리, DAO는 마이바티스로 작성후 호출))  
 
 
 6-1)  JSP  => 경로 수정  : /WEB-INF/views 추가
   
   <%@ include file="/WEB-INF/views/common/setting.jsp" %>
   <%@ include file="/WEB-INF/views/common/header.jsp" %>   
   <%@ include file="/WEB-INF/views/common/footer.jsp" %> 
    
  6-2) src/main/resources/dataSource-config.xml 작성
	    => web.xml에 등록해야 함 
	    <context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
						classpath:/dataSource-config.xml  <!-- 추가해야 작동  -->
			</param-value>
		</context-param>
		
		
		--------
		소스 작성
		<!-- Mybatis 설정 시작 -->
		<!-- 컨넥션풀 -->
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName" value="java:comp/env/jdbc/jsp_pj_126" />
			<property name="resourceRef" value="true" />
		</bean>
		
		<!-- Mybatis 파일 위치 지정, 컨넥션풀 -->
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="mapperLocations" value="classpath:mappers/**/*.xml" />  
		</bean>
		
		// 생성자 DI이며, sqlSession이 참조변수
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg ref="sqlSessionFactory" />
		</bean>
		
		<!-- Mybatis 설정 종료 -->
		
	///////////////////////////////////////////////////////////////////////////////	
		
7.	상품목록 ProductList 작성
    
    7-1) 컨트롤러, 서비스, DAO에 어노테이션 추가
    패키지 오류 먼저 수정(jsp패키지와 스프링 패키지가 다르므로)후 어노테이션 추가
    
	@Controller
	public class ProductController {
		
		private static final Logger logger = LoggerFactory.getLogger(ProductController.class);
		
		@Autowired
		ProductServiceImpl service;
		
		// 상품목록
		@RequestMapping("productList.pd")
		public String productList(HttpServletRequest req, Model model) {
			logger.info("[url ==> productList.pd]");
			
			service.productList(req, model);
			return "manager/Product/productList";
		}
	
	}  
	    
    ----
    @Service
	public class ProductServiceImpl implements ProductService {
	
	@Autowired
	ProductDAO dao;
	
	
	// 상품리스트
	@Override
	public void productList(HttpServletRequest req, Model model) {
		
		System.out.println("서비스 - productList");
		// 3단계. 화면으로부터 입력받은 값을 받는다.
		String pageNum = req.getParameter("pageNum");
		
		// 4단계. 싱글톤방식으로 dao 객체 생성, 다형성 적용
		// ProductDAO dao = ProductDAOImpl.getInstance();
		
		// 5-1단계.
		Paging paging = new Paging(pageNum);
		
		// product 카운트
		int total = dao.productCnt();
		
		System.out.println("total => " + total);
		paging.setTotalCount(total);
		
		int start = paging.getStartRow(); // 페이지별 시작번호
		int end = paging.getEndRow();	// 페이지별 끝번호
		System.out.println("start ==> " + start);
		System.out.println("end ==> " + end);
		
		// 5-2단계. 리스트 조회
		// map 처리
		// List<ProductDTO> list = dao.productList(start, end);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("start", start);
		map.put("end", end);
		List<ProductDTO> list = dao.productList(map);
		
		System.out.println("list ==> " + list);
		
		// 6단계. jsp로 처리 결과 전달(request나 session으로 처리 결과를 저장 후 전달)
		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		
	}
		
		나머지 소스는 주석처리
	}	
	
	---
	@Repository
	public class ProductDAOImpl implements ProductDAO {
	
	// Mybatis jar 파일들이 pom.xml에 등록되어 있어야 SqlSession이 import 가능
	// dataSource-config.xml에 bean id="sqlSession"로 설정되어 있어야 함
	
	@Autowired
	SqlSession sqlSession;
	
		// 상품 갯수
	@Override
	public int productCnt() {
		System.out.println("DAO - productCnt"); 
		
		// 방법1.
		// int selectCnt = sqlSession.selectOne("spring.mvc.pj_126.dao.ProductDAO.productCnt");
		// return selectCnt;
		
		// 방법2. 
		ProductDAO dao = sqlSession.getMapper(ProductDAO.class);
		int selectCnt = dao.productCnt();
		return selectCnt;
	}
	
	// 상품목록
	@Override
	public List<ProductDTO> productList(Map<String, Object> map) {
		System.out.println("DAO - productList");
		
		// 방법1.
		// List<ProductDTO> list = sqlSession.selectList("spring.mvc.pj_126.dao.ProductDAO.productList", map);
		// return list;
		
		// 방법2. 
		ProductDAO dao = sqlSession.getMapper(ProductDAO.class);
		List<ProductDTO> list = dao.productList(map);
			
				// 1. list 생성
				// 2. dto 생성
				// 3. dto에 rs게시글정보를 담는다.
				// 4. list에 dto를 추가한다.
			 	// 5. list 리턴
		return list;
	}
		나머지 소스는 주석처리
	}
	
	
		
	7-3) 마이바티스 매퍼 파일 작성
	
		=> 1. 한두줄의 자바코드로 DB연동을 처리한다
		   2. SQL 명령어를 자바 코드에서 분리하여 XML 파일에 Mapper로 따로 관리
		   
	   - src/main/resources/에서 폴더 생성 : mappers 폴더 생성
	   - 그 폴더 우클릭 > new > other > xml file > productMapper.xml 생성
	   -  productMapper.xml 에 추가
	
	<?xml version="1.0" encoding="UTF-8"?>

	<!DOCTYPE mapper
		  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		  
	<mapper namespace="spring.mvc.pj_126.dao.ProductDAO">  <!-- namespace="패키지명.인터페이스" -->
	<!-- 상품 갯수 -->
 	<select id="productCnt" resultType="int">
 		SELECT COUNT(*) as cnt FROM mvc_product_tbl
 	</select>
 	
 	<!-- 상품목록 -->
	<select id="productList" parameterType="java.util.Map" resultType="spring.mvc.pj_126.dto.ProductDTO">
 		<![CDATA[   
 		SELECT * 
		  FROM (
		  		SELECT A.*, rownum as rn  
		   	      FROM (
		  	        	SELECT pdNo, pdName, pdImg, category, brand, content, price, quantity, status, indate
		  	              FROM mvc_product_tbl  
		      	         ORDER BY pdNo DESC 
		  	            ) A 
		     	) 
		  	 WHERE rn >= #{start} AND rn <= #{end} 
		]]>  	 
 	</select>
	</mapper>
	
	 
		 
	*************************************************
	
	실행 : hhttp://localhost/pj_126/productList.pd
	**************************************************
	
	
///////////////////////////////////////////////////////////////////////////////	

8. 상품 등록
8-1) ProductController.java
	
	// 상품등록 화면 
	@RequestMapping("productAdd.pd")
	public String productAdd() {
		logger.info("[url ==> productAdd.pd]");
		
		return "manager/Product/productAdd";
	}
	
8-2). 경로변경
 productAdd.jsp
 
 *************************************************
	메뉴 : 상품등록 클릭
	실행 : http://localhost/pj_126/productAdd.pd
**************************************************

8-3) 상품 등록 처리

****** 주의사항 **********************************

[ servlet_context.xml 추가 ] - webapp/WEB-INF/spring/appServlet/servlet-context.xml

 	<!-- MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize" value="100000000" />
	</beans:bean>
	
	
[pom.xml 추가]
	
	<!-- fileupload 시작 : 상품등록, 수정시 필요함-->
    <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.3.2</version>
    </dependency>
  
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.4</version>
  	</dependency>
  	<!-- fileupload 끝 -->


****** 주의사항 **********************************	
상품등록,수정 => 매개변수에 MultipartHttpServletRequest req 사용

등록, 수정후 리스트 이동시 바로 반영(새로고침 할 필요 없음)
     
     
================================================

[ ProductServiceImpl.java ]

//  list => [ProductDTO [pdNo=2, pdName=비스포크, pdImg=/jsp_pj_126/resources/upload/비스포크냉장고.jpg, category=주방가전, brand=삼성, content=소음 없음, price=890000, quantity=5, status=판매중, indate=2022-09-02]]
// 새로고침하지 않아도 리스트에 이미지가 뿌려진다.	
		

[ 상품등록 ]--------------------------------------------		


// 상품등록
	@Override
	public void productAddAction(MultipartHttpServletRequest req, Model model) 
			throws ServletException, IOException {
		System.out.println("서비스 - productAddAction");
		
		// 추가S : JSP의 ImageUploadHandler.java 기능
		MultipartFile file = req.getFile("pdImg");  // 상품이미지
		System.out.println("file : " + file);
		
		// input 경로
		String saveDir = req.getSession().getServletContext().getRealPath("/resources/upload/");
		System.out.println("saveDir : " + saveDir);
		
		// 추가하기 위해 선택할 샘플이미지 경로
		// D:\Dev126\workspace\spring_pj_126\src\main\webapp\resources\images\product_sample
		
		// output 경로(jsp의 IMG_UPLOAD_DIR) : spring_pj_126 수정
		String realDir = "D:\\Dev126\\workspace\\spring_pj_126\\src\\main\\webapp\\resources\\upload\\";
		System.out.println("realDir : " + realDir);
		
		FileInputStream fis = null;
		FileOutputStream fos = null;
		try {
			file.transferTo(new File(saveDir + file.getOriginalFilename()));
			
			fis = new FileInputStream(saveDir + file.getOriginalFilename());
			fos = new FileOutputStream(realDir + file.getOriginalFilename());
			
			int data = 0;
			
			while((data = fis.read()) != -1) {
				fos.write(data);
			}
			
			// 추가E
			
			// 3단계. 화면으로부터 입력받은 값을 받아서 dto에 담는다.
			ProductDTO dto = new ProductDTO();
			dto.setPdName(req.getParameter("pdName"));
			
			// 플젝명/upload 해당경로
			// ImageUploadHandler 클래스에서 파일명을 setAttribute()로 넘겼으므로
			// (resources/images/product_sample에서 이미지 선택 => upload 폴더로 저장됨)
			
			// 수정S
			String p_img1 = "/pj_126/resources/upload/" + file.getOriginalFilename(); // 컨텍스트명/경로
			System.out.println("dto.getPdImg() : " + p_img1);
			// 수정E
			
			dto.setPdImg(p_img1);
			
			dto.setCategory(req.getParameter("category"));
			dto.setBrand(req.getParameter("brand"));
			dto.setContent(req.getParameter("content"));
			dto.setPrice(Integer.parseInt(req.getParameter("price")));
			dto.setQuantity(Integer.parseInt(req.getParameter("quantity")));
			dto.setStatus(req.getParameter("status"));
			
			// 4단계. 싱글톤으로 dao 객체 생성, 다형성 생성
			// ProductDAO dao = ProductDAOImpl.getInstance();
			
			// 5단계. 상품정보 insert
			int insertCnt = dao.productInsert(dto);
			
			System.out.println("insertCnt : " + insertCnt); // 정상:1
			
			// 3	트롬세탁기	/pj_126/resources/upload/트롬세탁기.jpg	생활가전	LG	최신형이며, 소음없음	890000	3	판매중	22/09/14	1
			// upload폴더를 새로고침하면 upload 폴더에 등록한 이미지가 들어온다. 리스트화면은 새로고침하지 않아도 바로 반영된다. 
			
			// 6단계. jsp로 처리결과 전달
			model.addAttribute("insertCnt", insertCnt);  
			
		} catch(IOException e) {
			e.printStackTrace();
		} finally {
			if(fis != null) fis.close();
			if(fos != null) fos.close();
		}
	}
	
	
	
[ 상품수정	 ]--------------------------------------------
	// 상품수정
	@Override
	public void productUpdateAction(MultipartHttpServletRequest req, Model model)
			throws ServletException, IOException {
		
		System.out.println("서비스 - productDetailAction");
		
		// 화면값 받아오기(hidden값)
		int pageNum = Integer.parseInt(req.getParameter("pageNum"));
		int hiddenPdNo = Integer.parseInt(req.getParameter("hiddenPdNo")); // pk
		String hiddenPdImg = req.getParameter("hiddenPdImg");  // 기존 상품이미지
		System.out.println("hiddenPdImg : " + hiddenPdImg);
		// String uploadPdImg = (String)req.getAttribute("fileName"); // upload 파일명
		
		//////////////////////////////////

		// 추가S : JSP의 ImageUploadHandler.java 기능
		// productDetailAction.jsp에서 <input type="file" name="pdImg">이므로
		MultipartFile file = req.getFile("pdImg");  // 상품이미지
		System.out.println("file : " + file);
		
		// input 경로
		String saveDir = req.getSession().getServletContext().getRealPath("/resources/upload/");
		System.out.println("saveDir : " + saveDir);
		
		// 추가하기 위해 선택할 샘플이미지 경로
		// D:\Dev126\workspace\spring_pj_126\src\main\webapp\resources\images\product_sample
		
		// output 경로(jsp의 IMG_UPLOAD_DIR) : spring_pj_126 수정
		String realDir = "D:\\Dev126\\workspace\\spring_pj_126\\src\\main\\webapp\\resources\\upload\\";
		System.out.println("realDir : " + realDir);
		
		String p_img1 = "";
		FileInputStream fis = null;
		FileOutputStream fos = null;
		
		// 이미지를 수정하고자 할 경우 선택한 이미지를 p_img에 등록
		if(file.getOriginalFilename() != null && file.getOriginalFilename() != "") {
			try {
				file.transferTo(new File(saveDir + file.getOriginalFilename()));
				
				fis = new FileInputStream(saveDir + file.getOriginalFilename());
				fos = new FileOutputStream(realDir + file.getOriginalFilename());
				
				int data = 0;
				
				while((data = fis.read()) != -1) {
					fos.write(data);
				}
			} catch(IOException e) {
				e.printStackTrace();
			} finally {
				if(fis != null) fis.close();
				if(fos != null) fos.close();
			}
			
			// 수정S
			p_img1 = "/pj_126/resources/upload/" + file.getOriginalFilename(); // 컨텍스트명/경로
			System.out.println("새 이미지 : " + p_img1);
			// 수정E
		} else {
			// 기존 이미지 사용(이미지 수정 안할 경우)
			p_img1 = hiddenPdImg;
			System.out.println("기존 이미지 : " + p_img1);
		}
		
		// 추가E
		//////////////////////////////////
		
		// 3단계. 화면으로부터 입력받은 값을 받는다.
		ProductDTO dto = new ProductDTO();
		// 실제 화면값 받아오기
		dto.setPdNo(hiddenPdNo);  // 누락주의
		dto.setPdName(req.getParameter("pdName"));
		dto.setBrand(req.getParameter("brand"));
		dto.setPdImg(p_img1);  // 이미지 추가 주의
		dto.setCategory(req.getParameter("category"));
		dto.setContent(req.getParameter("content"));
		dto.setPrice(Integer.parseInt(req.getParameter("price")));
		dto.setQuantity(Integer.parseInt(req.getParameter("quantity")));
		dto.setStatus(req.getParameter("status"));
		
		// 4단계. 싱글톤으로 dao 객체 생성, 다형성 생성
		// ProductDAO dao = ProductDAOImpl.getInstance();
		
		// 5단계. 상품정보 수정하기
		int updateCnt = dao.productUpdate(dto);
		
		// 6단계. jsp로 처리결과 전달
		model.addAttribute("pageNum", pageNum);
		model.addAttribute("updateCnt", updateCnt);
	}
	


로그	
start : 1
end : 10
DAO - productList()
list => [ProductDTO [pdNo=5, pdName=양문형 냉장고, pdImg=/pj_126/resources/upload/양문형냉장고.jpg, category=주방가전, brand=LG, content=우수한 양문형 냉장고, price=777777, quantity=2, status=판매중, indate=2022-09-14], ProductDTO [pdNo=4, pdName=아이폰, pdImg=/pj_126/resources/upload/아이폰12.png, category=휴대폰, brand=아이폰, content=최신형, price=600000, quantity=5, status=판매중, indate=2022-09-14], ProductDTO [pdNo=3, pdName=트롬세탁기, pdImg=/pj_126/resources/upload/트롬세탁기.jpg, category=생활가전, brand=LG, content=최신형이며, 소음없음, price=890000, quantity=3, status=판매중, indate=2022-09-14], ProductDTO [pdNo=2, pdName=비스포크, pdImg=/jsp_pj_126/resources/upload/비스포크냉장고.jpg, category=주방가전, brand=삼성, content=소음 없음, price=890000, quantity=5, status=판매중, indate=2022-09-02]]